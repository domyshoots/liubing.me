import{_ as u,r as c,o as d,c as r,a as n,b as s,d as a,f as k,w as t,e as i}from"./app-2c72f79b.js";const v={},m=n("h1",{id:"vue-中使用-csv-优雅的管理-i18n-多语言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue-中使用-csv-优雅的管理-i18n-多语言","aria-hidden":"true"},"#"),s(" Vue 中使用 CSV 优雅的管理 i18n 多语言")],-1),g=n("br",null,null,-1),b=n("code",null,"icotjo",-1),h=n("br",null,null,-1),f=n("code",null,"icotjo",-1),_={href:"https://github.com/wonsikin/icotjo",target:"_blank",rel:"noopener noreferrer"},y={class:"hint-container tip"},w=n("p",{class:"hint-container-title"},"提示",-1),j=n("code",null,"icotjo.exe",-1),L=n("code",null,"icotjo",-1),x=n("code",null,"icotjoForMac",-1),C={href:"https://github.com/liub1934/i18n-csv-tool",target:"_blank",rel:"noopener noreferrer"},S=i(`<h2 id="csv-文件格式" tabindex="-1"><a class="header-anchor" href="#csv-文件格式" aria-hidden="true">#</a> CSV 文件格式</h2><p>以下是一个通用的管理格式，第一行定义多语言的 Key，按逗号进行分隔。</p><div class="language-csv line-numbers-mode" data-ext="csv"><pre class="language-csv"><code><span class="token value">key</span><span class="token punctuation">,</span><span class="token value">zh-CN</span><span class="token punctuation">,</span><span class="token value">en-US</span><span class="token punctuation">,</span><span class="token value">ja</span>
<span class="token value">GENERAL.FIELD.VIEW</span><span class="token punctuation">,</span><span class="token value">查看</span><span class="token punctuation">,</span><span class="token value">View</span><span class="token punctuation">,</span><span class="token value">確認</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://image.liubing.me/2023/02/11/1d7ccb37ebf62.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="生成多语言-json" tabindex="-1"><a class="header-anchor" href="#生成多语言-json" aria-hidden="true">#</a> 生成多语言 JSON</h2><p>Window 系统可直接双击<code>icotjo.exe</code>文件执行，Linux 系统用户可通过命令<code>./icotjo</code>执行，Mac 系统用户同理，通过命令<code>./icotjoForMac</code>执行。</p><p>执行命令后如果 CSV 文件格式都 OK 的话同级目录会自动<code>zh-CN.json</code> <code>en-US.json</code> <code>ja.json</code>文件。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Linux 或 Mac 执行文件提示没权限的话可以使用 chmod 修改文件权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> 0755 icotjo
<span class="token function">chmod</span> 0755 icotjoForMac
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>生成的 JSON 文件就是 <code>i18n</code> 所需要引入的文件。</p><figure><img src="https://image.liubing.me/2023/02/11/8a782f7f97a35.gif" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="引入使用" tabindex="-1"><a class="header-anchor" href="#引入使用" aria-hidden="true">#</a> 引入使用</h2><p>已 Vite + Vue3 为例子，通过<code>import</code>引入 json 文件，在 <code>i18n</code> <code>messages</code> 参数中配置</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createI18n <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-i18n&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getAppLang <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils&#39;</span>
<span class="token keyword">import</span> zhCN <span class="token keyword">from</span> <span class="token string">&#39;./lang/zh-CN.json&#39;</span>
<span class="token keyword">import</span> enUS <span class="token keyword">from</span> <span class="token string">&#39;./lang/en-US.json&#39;</span>
<span class="token keyword">import</span> ja <span class="token keyword">from</span> <span class="token string">&#39;./lang/ja.json&#39;</span>

<span class="token keyword">const</span> initLang <span class="token operator">=</span> <span class="token function">getAppLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token function">createI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  locale<span class="token operator">:</span> initLang<span class="token punctuation">,</span>
  fallbackLocale<span class="token operator">:</span> initLang<span class="token punctuation">,</span>
  messages<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;zh-CN&#39;</span><span class="token operator">:</span> zhCN<span class="token punctuation">,</span>
    <span class="token string-property property">&#39;en-US&#39;</span><span class="token operator">:</span> enUS<span class="token punctuation">,</span>
    ja<span class="token operator">:</span> ja
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> i18n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="按模块使用" tabindex="-1"><a class="header-anchor" href="#按模块使用" aria-hidden="true">#</a> 按模块使用</h2><p>当项目过大且模块过多的时候，多人同时编辑 CSV 文件的时候很容易产生冲突，这时候可以通过按模块的形式去维护管理 CSV，即每个模块都有个 CSV 文件，这样造成冲突的概率会大大减小。</p><figure><img src="https://image.liubing.me/2023/02/11/d3eefb393fd1e.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>为了保持 Key 各个模块的唯一下，可以在 Key 前面加上模块名。如下面的<code>GENERAL</code>和<code>USER</code></p>`,17),V=n("div",{class:"language-csv line-numbers-mode","data-ext":"csv"},[n("pre",{class:"language-csv"},[n("code",null,[n("span",{class:"token value"},"key"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"zh-CN"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"en-US"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"ja"),s(`
`),n("span",{class:"token value"},"GENERAL.FIELD.VIEW"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"查看"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"View"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"確認"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-csv line-numbers-mode","data-ext":"csv"},[n("pre",{class:"language-csv"},[n("code",null,[n("span",{class:"token value"},"key"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"zh-CN"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"en-US"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"ja"),s(`
`),n("span",{class:"token value"},"USER.FIELD.LOGIN"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"登录"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"Login"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"ログイン"),s(`
`),n("span",{class:"token value"},"USER.FIELD.WELCOME"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"欢迎"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"Welcome"),n("span",{class:"token punctuation"},","),n("span",{class:"token value"},"ようこそ"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("h2",{id:"模块-json-合并",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#模块-json-合并","aria-hidden":"true"},"#"),s(" 模块 JSON 合并")],-1),z={href:"https://cn.vitejs.dev/guide/features.html#glob-import",target:"_blank",rel:"noopener noreferrer"},I=i(`<p>我们将上面引入多语言的代码优化下，通过<code>i<wbr>mport.meta.glob</code>引入<code>lang</code>目录下的所有 json 文件，通过循环<code>modules</code>提取多语言文件内容，将同个语言不同的 json 内容合并成一个新的内容。<code>modules</code>中的内容可以打印看下。</p><figure><img src="https://image.liubing.me/2023/02/11/6b05f51e2faa9.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>最终代码如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createI18n <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-i18n&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getAppLang <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils&#39;</span>

<span class="token keyword">const</span> messages<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;./lang/**/*.json&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 获取路径中的多语言</span>
<span class="token keyword">function</span> <span class="token function">getLangByPath</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> path<span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> path <span class="token keyword">in</span> modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  modules<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>
    <span class="token keyword">const</span> pathLang <span class="token operator">=</span> <span class="token function">getLangByPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathLang<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>messages<span class="token punctuation">[</span>pathLang<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messages<span class="token punctuation">[</span>pathLang<span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>messages<span class="token punctuation">[</span>pathLang<span class="token punctuation">]</span><span class="token punctuation">,</span> mod<span class="token punctuation">.</span>default<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        messages<span class="token punctuation">[</span>pathLang<span class="token punctuation">]</span> <span class="token operator">=</span> mod<span class="token punctuation">.</span>default
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> initLang <span class="token operator">=</span> <span class="token function">getAppLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token function">createI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  locale<span class="token operator">:</span> initLang<span class="token punctuation">,</span>
  fallbackLocale<span class="token operator">:</span> initLang<span class="token punctuation">,</span>
  messages
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> i18n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2>`,5),U={class:"hint-container tip"},A=n("p",{class:"hint-container-title"},"提示",-1),F=n("code",null,"icotjo.exe",-1),G=n("code",null,"icotjo",-1),M=n("code",null,"icotjoForMac",-1),O={href:"https://github.com/liub1934/i18n-csv-tool",target:"_blank",rel:"noopener noreferrer"},R={href:"https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"CSVLint",-1),K=n("figure",null,[n("img",{src:"https://image.liubing.me/2023/02/11/38fb104290d00.png",alt:"image",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image")],-1),W=n("figure",null,[n("img",{src:"https://image.liubing.me/2023/02/11/5b0bb4bb835d0.png",alt:"image",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image")],-1),D={href:"https://marketplace.visualstudio.com/items?itemName=janisdd.vscode-edit-csv",target:"_blank",rel:"noopener noreferrer"},J=n("figure",null,[n("img",{src:"https://image.liubing.me/2023/02/11/a35d824bebbb3.png",alt:"image",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image")],-1);function T(P,q){const e=c("ExternalLinkIcon"),l=c("CodeTabs");return d(),r("div",null,[m,n("p",null,[s("项目中使用 CSV 文件将多语言集中在一起，方便同时对一个 Key 进行修改。"),g,s(" 通过一个可执行的文件"),b,s("，将 CSV 转换成各语言的 JSON 文件。"),h,f,s("是一个 Go 写的工具，源码可在"),n("a",_,[s("https://github.com/wonsikin/icotjo"),a(e)]),s("查看。")]),k(" more "),n("div",y,[w,n("p",null,[s("文中的"),j,s(),L,s(),x,s("等文件可以在"),n("a",C,[s("Github 仓库"),a(e)]),s("进行下载。")])]),S,a(l,{id:"62",data:[{id:"通用模块"},{id:"用户模块"}]},{title0:t(({value:o,isActive:p})=>[s("通用模块")]),title1:t(({value:o,isActive:p})=>[s("用户模块")]),tab0:t(({value:o,isActive:p})=>[V]),tab1:t(({value:o,isActive:p})=>[N]),_:1}),E,n("p",null,[s("拆分后不同的模块都会输出各个语言的 json 文件，这个时候我们可以使用 Vite 提供的"),n("a",z,[s("Glob 导入"),a(e)]),s("来自动导入需要的 json 文件。")]),I,n("div",U,[A,n("p",null,[s("文中的"),F,s(),G,s(),M,s("等文件可以在"),n("a",O,[s("Github 仓库"),a(e)]),s("进行下载。")])]),n("p",null,[s("由于 VsCode 对 CSV 文件内容没有高亮颜色显示，可以安装"),n("a",R,[s("Rainbow CSV"),a(e)]),s("，安装完成后即可高亮多色显示内容了，该扩展还提供了"),B,s("来校验 CSV 内容是否合法。可以比较下安装前后的效果")]),K,W,n("p",null,[s("此外还推荐安装"),n("a",D,[s("Edit csv"),a(e)]),s("扩展，该扩展可以支持 CSV 在表格里面进行内容修改，对于内容含有很多英文引号和逗号的情况下，避免手写转义引号和逗号的各种麻烦情况。")]),J])}const Q=u(v,[["render",T],["__file","gracefully-manage-i18n-using-csv-in-vue.html.vue"]]);export{Q as default};
