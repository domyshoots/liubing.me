import{_ as r,r as d,o as s,c,a,b as e,d as n,f as o,e as t}from"./app-2c72f79b.js";const g={},p=a("h1",{id:"基于宝塔-docker-自建-bitwarden-密码管理服务",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#基于宝塔-docker-自建-bitwarden-密码管理服务","aria-hidden":"true"},"#"),e(" 基于宝塔 Docker 自建 Bitwarden 密码管理服务")],-1),l={href:"https://bitwarden.com",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/dani-garcia/bitwarden_rs",target:"_blank",rel:"noopener noreferrer"},b=a("s",null,"bitwarden_rs",-1),u={href:"https://github.com/dani-garcia/vaultwarden",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="宝塔安装-docker" tabindex="-1"><a class="header-anchor" href="#宝塔安装-docker" aria-hidden="true">#</a> 宝塔安装 Docker</h2><p>如果已经安装，可以忽略该步骤，如果没有安装，进入到宝塔面板的软件商店，搜索 docker 安装即可。</p><figure><img src="https://image.liubing.me/2019/12/26/500745e78893f.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="获取镜像" tabindex="-1"><a class="header-anchor" href="#获取镜像" aria-hidden="true">#</a> 获取镜像</h2><p>打开 docker 管理器，点击获取镜像，输入 Bitwarden_rs 的官方镜像<code>bitwardenrs/server</code>后点击获取镜像。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>原项目已经变更名称，故官方镜像名称也变成了<code>vaultwarden/server</code>，所以教程里面的<code>bitwardenrs/server</code>均需替换成新的镜像名称 <code>vaultwarden/server</code></p></div><figure><img src="https://image.liubing.me/2019/12/26/c14a8df9528d3.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="创建容器" tabindex="-1"><a class="header-anchor" href="#创建容器" aria-hidden="true">#</a> 创建容器</h2><p>1.点击创建容器按钮 2.填写端口映射中的<code>容器端口</code>：<code>80</code>,<code>服务端口</code>：<code>6666</code>(6666 可以自定义) 3.填写目录映射中的<code>服务器目录</code>：<code>/www/wwwroot/bitwarden.liubing.me</code>(该目录可以自定义，我习惯用网址作为目录)，<code>容器目录</code>：<code>/data</code> 4.填写内存配额，根据自己服务器的配置按需填写 5.提交创建容器 6.点击容器名称，修改容器名称为<code>Bitwarden</code>以方便辨认</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>端口映射和目录映射填写完成后一定要点击 + 号进行添加</p></div><figure><img src="https://image.liubing.me/2019/12/26/49d59861f5edf.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><figure><img src="https://image.liubing.me/2019/12/26/d2b1be24d8fcc.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="添加站点" tabindex="-1"><a class="header-anchor" href="#添加站点" aria-hidden="true">#</a> 添加站点</h2><p>一般可以添加一个二级域名，按自己需要起名字即可，由于我用的<code>cloudflare</code>的服务，所以以这个为演示，阿里云、百度云等其他厂商添加二级域名都是差不多的。</p><p>添加一个 A 记录，名字为<code>bitwarden</code>，指向的 IP 为你服务器 VPS 的 IP 地址，最后的访问地址就是<code>bitwarden.liubing.me</code>了。</p><figure><img src="https://image.liubing.me/2019/12/26/812f2e8686901.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>域名准备好后，在宝塔里面添加一个站点，FTP、数据库均不用创建，PHP 版本选择纯静态。</p><figure><img src="https://image.liubing.me/2019/12/26/8f442adca1059.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>网站添加完成后设置 SSL，自己准备证书，或者用免费的，我用的一直是 cloudflare 颁发的证书。<br> 设置完毕后开启强制 Https</p><figure><img src="https://image.liubing.me/2019/12/26/c4dc1ab3b419d.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>最后添加一个反向代理，名称随意填，目标 URL 为<code>http://127.0.0.1:6666</code>，端口号和上面<code>创建容器</code>时<code>服务端口</code>保持一直。</p><figure><img src="https://image.liubing.me/2019/12/26/87e73267f1965.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="完成自建" tabindex="-1"><a class="header-anchor" href="#完成自建" aria-hidden="true">#</a> 完成自建</h2><p>上述步骤都做完后别忘了在宝塔面板安全-防火墙中放行端口<code>6666</code>。<br> 最后不出意外的话访问<code>https://bitwarden.liubing.me</code>就能看到界面了。<br> 首次完成安装页面是英文的，自己可以创建一个账号登录进去，在设置-选项-语言中设置语言。</p><figure><img src="https://image.liubing.me/2019/12/26/823752848793e.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><figure><img src="https://image.liubing.me/2019/12/26/426be9f96588c.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="其他问题" tabindex="-1"><a class="header-anchor" href="#其他问题" aria-hidden="true">#</a> 其他问题</h2><h3 id="关闭注册" tabindex="-1"><a class="header-anchor" href="#关闭注册" aria-hidden="true">#</a> 关闭注册</h3><p>一般自建的服务都是自己用的，所以如果想关闭注册的话可以按照下面的方法做：</p><p>1.在 docker 管理器中点击刚才创建的容器的状态绿色图标，停止容器运行，然后删除容器（删除容器后不会删除数据）</p><figure><img src="https://image.liubing.me/2019/12/26/7aaae31a5fd4f.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>2.在 VPS 中运行下面的命令重新运行容器，其中<code>Bitwarden</code>为容器的名字，<code>SIGNUPS_ALLOWED=false</code>代表禁止注册，<code>/www/wwwroot/bitwarden.liubing.me</code>为上面创建容器时所写的<code>服务器目录</code>,<code>/data</code>为容器目录，<code>6666:80</code>代表上面创建容器时的<code>服务端口:容器端口</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> Bitwarden <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">SIGNUPS_ALLOWED</span><span class="token operator">=</span>false <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /www/wwwroot/bitwarden.liubing.me/:/data/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">6666</span>:80 <span class="token punctuation">\\</span>
  bitwardenrs/server:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行完成后在容器列表里就又能看到了。<br> 然后再去试下创建账号就会出现一个不能创建账号的错误提示。</p><figure><img src="https://image.liubing.me/2019/12/26/fcb5744695fd8.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="其他配置" tabindex="-1"><a class="header-anchor" href="#其他配置" aria-hidden="true">#</a> 其他配置</h3>`,36),f={href:"https://github.com/dani-garcia/bitwarden_rs/wiki",target:"_blank",rel:"noopener noreferrer"},w=a("h2",{id:"插件及-app-下载",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#插件及-app-下载","aria-hidden":"true"},"#"),e(" 插件及 App 下载")],-1),v={href:"https://bitwarden.com/#download",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="连接自建的服务" tabindex="-1"><a class="header-anchor" href="#连接自建的服务" aria-hidden="true">#</a> 连接自建的服务</h2><p>以 CHrome 的插件为例子，如果之前有安装及登录过，可以在设置中退出登录。<br> 点击左上角的设置图标，填写自建服务器的 URL 保存后登录即可。</p><figure><img src="https://image.liubing.me/2019/12/26/b6de0110b315b.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><figure><img src="https://image.liubing.me/2019/12/26/5908b0aee9a95.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="更新镜像" tabindex="-1"><a class="header-anchor" href="#更新镜像" aria-hidden="true">#</a> 更新镜像</h2><p>由于原项目改名，镜像名称也随之有变更，所以需要更新到最新的镜像的话，需要在宝塔的 docker 管理器容器列表中先将目前的项目停用掉删除（删除不会删除原数据，不放心的可以在网页中将现有密码先导出一遍）</p><figure><img src="https://image.liubing.me/2021/08/08/e62e4752478d0.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>删除后在镜像列表中找到原来的名称为<code>bitwardenrs/server</code>的删除</p><figure><img src="https://image.liubing.me/2021/08/08/8fa6a18434118.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>镜像删除后点击获取镜像按钮，输入新的镜像名称<code>vaultwarden/server</code>获取镜像</p><figure><img src="https://image.liubing.me/2021/08/08/cba9ac5a06ae1.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>获取完成后重新再 VPS 上重新运行容器的命令,注意相关目录和镜像名称别输错了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> Bitwarden <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">SIGNUPS_ALLOWED</span><span class="token operator">=</span>false <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /www/wwwroot/bitwarden.liubing.me/:/data/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">6666</span>:80 <span class="token punctuation">\\</span>
  vaultwarden/server:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动完成后就能在容器列表中重新看到新运行的项目了，数据依旧是原来的数据。</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>最后就可以愉快的在浏览器和手机上愉快的使用了，顺便说句：我的密码存储我做主，再也不用害怕密码忘记的事了，也可以记录些银行卡等隐私信息，随时复制。</p><figure><img src="https://image.liubing.me/2019/12/29/a876abe759b9f.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><figure><img src="https://image.liubing.me/2019/12/29/88198d86a91cb.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>`,18);function _(x,y){const i=d("ExternalLinkIcon");return s(),c("div",null,[p,a("p",null,[a("a",l,[e("Bitwarden"),n(i)]),e("是一个跨平台的密码管理软件，类似于 1Password、EnPass、LastPass 等。Bitwarden 是免费开源的，可以将服务端部署在自己的服务器上，比如群晖，并且支持 Docker 部署。但官方的镜像要求至少 2G 以上内存，要求比较高。有人用 Rust 实现了 Bitwarden 服务器，项目叫"),a("a",m,[b,n(i)]),e("，现在已经更新为"),a("a",u,[e("vaultwarden"),n(i)]),e("，并且提供了 Docker 镜像，这个实现更进一步降低了对机器配置的要求，并且 Docker 镜像体积很小，部署非常方便。")]),o(" more "),h,a("p",null,[e("参考项目的 wiki 即可："),a("a",f,[e("https://github.com/dani-garcia/bitwarden_rs/wiki"),n(i)])]),w,a("p",null,[e("可以到 bitwarden 官网自行下载："),a("a",v,[e("https://bitwarden.com/#download"),n(i)])]),k])}const B=r(g,[["render",_],["__file","bt-docker-build-bitwarden.html.vue"]]);export{B as default};
